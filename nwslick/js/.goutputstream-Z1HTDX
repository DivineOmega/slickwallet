var satoshisInABitcoin = 100000000;

var availableBalance;
var estimatedBalance;
var incomingBitcoins;
var mainAddress;
var qrcode = new QRCode("main_address_qrcode");

loopUpdateBalance();
sendCommand('get_main_address');

function guiUpdate()
{
	$('#balance').html(availableBalance);
	
	incomingBitcoins = (estimatedBalance-availableBalance);
	
	if (incomingBitcoins>0) $('#incoming').html(incomingBitcoins +' (incoming)');
	else $('#incoming').html('');
	
	$('#main_address').html(mainAddress);
	if (typeof mainAddress != 'undefined') qrcode.makeCode(mainAddress);
}

function loopUpdateBalance()
{
	sendCommand('get_available_balance');
	sendCommand('get_estimated_balance');
	setTimeout('loopUpdateBalance();', 2500);
}

function sendCommand(command)
{
	var net = require('net');

	var HOST = 'localhost';
	var PORT = 19912;

	var client = new net.Socket();
	client.connect(PORT, HOST, function() 
	{
		console.log('Connected to: ' + HOST + ':' + PORT);
	});
	
	client.on('data', function(data) 
	{
		if (data=='jslick:')
		{
			console.log('Sending command: '+command);
			client.write(command+'\n');
		}
		else
		{
			console.log('Response received: ' + data);
			client.destroy();
			
			if (command=='get_available_balance')
			{
				availableBalance = (data.toString()/satoshisInABitcoin);
			}
			else if (command=='get_estimated_balance')
			{
				estimatedBalance =  (data.toString()/satoshisInABitcoin);
			}
			else if (command=='get_main_address')
			{
				mainAddress = data.toString();
			}
			
			guiUpdate();
		}
	});
	
	client.on('close', function() {
		console.log('Connection closed');
	});
}
